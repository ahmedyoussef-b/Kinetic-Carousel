// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------------------
// ENUMS
// ---------------------------

enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
  VISITOR
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum TimePreference {
  ANY
  AM
  PM
}

enum PresenceStatus {
  ONLINE
  OFFLINE
}

// ---------------------------
// AUTH & USERS
// ---------------------------

model User {
  id                    String                @id
  username              String                @unique
  name                  String
  firstName             String
  lastName              String
  email                 String                @unique
  password              String
  img                   String?
  role                  Role                  @default(STUDENT)
  active                Boolean               @default(false)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  twoFactorEnabled      Boolean?              @default(false)
  twoFactorCode         String?
  twoFactorCodeExpires  DateTime?
  passwordResetToken    String?
  passwordResetExpires  DateTime?
  admin                 Admin?
  teacher               Teacher?
  student               Student?
  parent                Parent?
  chatroomSessions      ChatroomSession[]
  chatroomMessages      ChatroomMessage[]
  sessionParticipants   SessionParticipant[]
  raisedHands           RaisedHand[]
  UserPresence          UserPresence?
}

model Admin {
  id      String   @id @default(cuid())
  userId  String   @unique
  name    String
  surname String
  phone   String?
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Teacher {
  id        String   @id @default(cuid())
  userId    String   @unique
  name      String
  surname   String
  phone     String?
  address   String?
  img       String?
  bloodType String?
  birthday  DateTime?
  sex       UserSex?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subjects  Subject[]
  lessons   Lesson[]
}

model Student {
  id                String                 @id @default(cuid())
  userId            String                 @unique
  name              String
  surname           String
  phone             String?
  address           String
  img               String?
  bloodType         String
  birthday          DateTime
  sex               UserSex
  user              User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  gradeId           Int?
  grade             Grade?                 @relation(fields: [gradeId], references: [id])
  classId           Int?
  class             Class?                 @relation(fields: [classId], references: [id])
  parentId          String?
  parent            Parent?                @relation(fields: [parentId], references: [id])
  attendances       Attendance[]
  results           Result[]
  optionalSubjects  Subject[]              @relation("StudentOptionalSubjects")
}

model Parent {
  id       String    @id @default(cuid())
  userId   String    @unique
  name     String
  surname  String
  phone    String?
  address  String
  img      String?
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  students Student[]
}

// ---------------------------
// SCHOOL STRUCTURE
// ---------------------------

model Grade {
  id       Int       @id @default(autoincrement())
  level    Int       @unique
  classes  Class[]
  students Student[]
}

model Class {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  abbreviation String?
  capacity     Int
  gradeId      Int
  grade        Grade     @relation(fields: [gradeId], references: [id])
  students     Student[]
  lessons      Lesson[]
  events       Event[]
  announcements Announcement[]
  teacherAssignments ClassAssignment[]
}

model Subject {
  id                 Int                   @id @default(autoincrement())
  name               String                @unique
  weeklyHours        Int
  coefficient        Int
  isOptional         Boolean?              @default(false)
  teachers           Teacher[]
  lessons            Lesson[]
  students           Student[]             @relation("StudentOptionalSubjects")
  lessonRequirements LessonRequirement[]
  subjectRequirements SubjectRequirement[]
  teacherAssignments TeacherAssignment[]
}

model Classroom {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  abbreviation String?
  capacity     Int
  building     String?
  lessons      Lesson[]
}

// ---------------------------
// ACADEMICS & SCHEDULE
// ---------------------------

model Lesson {
  id                 Int                  @id @default(autoincrement())
  name               String
  day                Day
  startTime          DateTime
  endTime            DateTime
  subjectId          Int
  subject            Subject              @relation(fields: [subjectId], references: [id])
  classId            Int?
  class              Class?               @relation(fields: [classId], references: [id])
  teacherId          String
  teacher            Teacher              @relation(fields: [teacherId], references: [id])
  classroomId        Int?
  classroom          Classroom?           @relation(fields: [classroomId], references: [id])
  exams              Exam[]
  assignments        Assignment[]
  attendances        Attendance[]
  scheduleDraftId    String?
  scheduleDraft      ScheduleDraft?       @relation(fields: [scheduleDraftId], references: [id])
  optionalSubjectId  Int?
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Float
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
}

// ---------------------------
// EVENTS & ANNOUNCEMENTS
// ---------------------------

model Event {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  class       Class?    @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

// ---------------------------
// WIZARD & SCHEDULER
// ---------------------------

model ScheduleDraft {
  id                  String                @id @default(cuid())
  userId              String
  name                String
  description         String?
  isActive            Boolean               @default(false)
  schoolConfig        Json?
  classes             Json?
  subjects            Json?
  teachers            Json?
  rooms               Json? // Note: Mapped to classrooms in the app
  grades              Json?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  lessons             Lesson[]
  lessonRequirements  LessonRequirement[]
  subjectRequirements SubjectRequirement[]
  teacherConstraints  TeacherConstraint[]
  teacherAssignments  TeacherAssignment[]
  @@unique([userId, name])
}

model LessonRequirement {
  id              Int            @id @default(autoincrement())
  classId         Int
  subjectId       Int
  hours           Int
  scheduleDraftId String
  scheduleDraft   ScheduleDraft  @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
  @@unique([scheduleDraftId, classId, subjectId])
}

model SubjectRequirement {
  id               Int            @id @default(autoincrement())
  subjectId        Int            @unique
  subject          Subject        @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  allowedRoomIds   Int[]
  timePreference   TimePreference @default(ANY)
  scheduleDraftId  String
  scheduleDraft    ScheduleDraft  @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
}

model TeacherConstraint {
  id              Int            @id @default(autoincrement())
  teacherId       String
  day             Day
  startTime       String // Store as "HH:mm"
  endTime         String // Store as "HH:mm"
  description     String?
  scheduleDraftId String
  scheduleDraft   ScheduleDraft  @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
}

model TeacherAssignment {
  id               Int               @id @default(autoincrement())
  teacherId        String
  subjectId        Int
  scheduleDraftId  String
  scheduleDraft    ScheduleDraft     @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
  classAssignments ClassAssignment[]
  @@unique([scheduleDraftId, teacherId, subjectId])
}

model ClassAssignment {
  id                  Int               @id @default(autoincrement())
  teacherAssignmentId Int
  teacherAssignment   TeacherAssignment @relation(fields: [teacherAssignmentId], references: [id], onDelete: Cascade)
  classId             Int
  class               Class             @relation(fields: [classId], references: [id])
  @@unique([teacherAssignmentId, classId])
}

// ---------------------------
// CHATROOM / INTERACTIVE
// ---------------------------

model ChatroomSession {
  id           String        @id @default(cuid())
  title        String
  description  String?
  type         String // e.g., 'CLASS', 'MEETING'
  startTime    DateTime      @default(now())
  endTime      DateTime?
  status       String        @default("ACTIVE") // e.g., 'ACTIVE', 'ENDED'
  hostId       String
  host         User          @relation(fields: [hostId], references: [id])
  classId      Int?
  participants SessionParticipant[]
  messages     ChatroomMessage[]
  raisedHands  RaisedHand[]
}

model SessionParticipant {
  id                String          @id @default(cuid())
  userId            String
  user              User            @relation(fields: [userId], references: [id])
  chatroomSessionId String
  session           ChatroomSession @relation(fields: [chatroomSessionId], references: [id], onDelete: Cascade)
  joinedAt          DateTime        @default(now())
  isMuted           Boolean         @default(false)
  @@unique([chatroomSessionId, userId])
}

model ChatroomMessage {
  id                Int             @id @default(autoincrement())
  content           String
  authorId          String
  author            User            @relation(fields: [authorId], references: [id])
  chatroomSessionId String
  session           ChatroomSession @relation(fields: [chatroomSessionId], references: [id], onDelete: Cascade)
  createdAt         DateTime        @default(now())
}

model RaisedHand {
  id                Int             @id @default(autoincrement())
  userId            String
  user              User            @relation(fields: [userId], references: [id])
  chatroomSessionId String
  session           ChatroomSession @relation(fields: [chatroomSessionId], references: [id], onDelete: Cascade)
  raisedAt          DateTime        @default(now())
  @@unique([chatroomSessionId, userId])
}

model UserPresence {
  id       String         @id @default(cuid())
  userId   String         @unique
  status   PresenceStatus @default(OFFLINE)
  lastSeen DateTime       @updatedAt
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("user_presence")
}
