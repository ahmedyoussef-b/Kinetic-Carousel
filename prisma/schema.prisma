// prisma/schema.prisma

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

// ================================================= //
// AUTHENTICATION & CORE USER MODEL
// ================================================= //
model User {
  id                      String                 @id @unique
  username                String                 @unique
  email                   String                 @unique
  name                    String?
  firstName               String?
  lastName                String?
  role                    Role
  active                  Boolean                @default(true)
  img                     String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  twoFactorEnabled        Boolean?               @default(false)
  twoFactorCode           String?
  twoFactorCodeExpires    DateTime?
  // Relations
  admin                   Admin?
  teacher                 Teacher?
  student                 Student?
  parent                  Parent?
  hostedSessions          ChatroomSession[]      @relation("HostedSessions")
  sessionParticipations   SessionParticipant[]
  raisedHands             RaisedHand[]
  messages                ChatroomMessage[]
  reactions               Reaction[]

  @@map("users")
}

// ================================================= //
// USER ROLES
// ================================================= //
model Admin {
  id      String  @id @default(cuid())
  userId  String  @unique
  name    String
  surname String
  phone   String?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

model Teacher {
  id        String  @id @default(cuid())
  userId    String  @unique
  name      String
  surname   String
  phone     String?
  address   String?
  img       String?
  bloodType String?
  birthday  DateTime?

  // Relations
  user              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  subjects          Subject[]             @relation("TeacherSubjects")
  lessons           Lesson[]
  teacherConstraints TeacherConstraint[]
  teacherAssignments TeacherAssignment[]


  @@map("teachers")
}

model Student {
  id          String   @id @default(cuid())
  userId      String   @unique
  name        String
  surname     String
  phone       String?
  address     String?
  img         String?
  bloodType   String?
  birthday    DateTime?
  sex         UserSex?
  classId     Int?
  gradeId     Int?
  parentId    String?

  // Relations
  user         User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  class        Class?                @relation(fields: [classId], references: [id], onDelete: SetNull)
  grade        Grade?                @relation(fields: [gradeId], references: [id], onDelete: SetNull)
  parent       Parent?               @relation(fields: [parentId], references: [id], onDelete: SetNull)
  attendances  Attendance[]
  results      Result[]
  // optionalGroupId     String?
  optionalGroup       OptionalSubjectGroup? @relation(fields: [optionalGroupId], references: [id])
  optionalSubjects    OptionalSubject[]     @relation("StudentOptionalSubjects")

  @@map("students")
}

model Parent {
  id      String   @id @default(cuid())
  userId  String   @unique
  name    String
  surname String
  phone   String?
  address String
  img     String?

  // Relations
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  students Student[]

  @@map("parents")
}

// ================================================= //
// ACADEMIC STRUCTURE
// ================================================= //
model Grade {
  id       Int       @id @default(autoincrement())
  level    Int       @unique
  // Relations
  classes  Class[]
  students Student[]

  @@map("grades")
}

model Class {
  id                Int                  @id @default(autoincrement())
  name              String               @unique
  abbreviation      String?
  capacity          Int
  gradeId           Int
  // Relations
  grade             Grade                @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  students          Student[]
  lessons           Lesson[]
  announcements     Announcement[]
  events            Event[]
  lessonRequirements LessonRequirement[]
  classAssignments  ClassAssignment[]

  @@map("classes")
}

model Subject {
  id            Int            @id @default(autoincrement())
  name          String
  weeklyHours   Int?
  coefficient   Int?
  isOptional    Boolean?       @default(false)
  
  // Relations
  lessons       Lesson[]
  teachers      Teacher[]      @relation("TeacherSubjects")
  lessonRequirements LessonRequirement[]
  subjectRequirements SubjectRequirement[]
  teacherAssignments TeacherAssignment[]
  optionalGroups OptionalSubjectGroup[] @relation("OptionalSubjectChoices")
  students       Student[]              @relation("StudentOptionalSubjects")

  @@map("subjects")
}

model OptionalSubjectGroup {
  id             String    @id @default(cuid())
  name           String    // e.g., "LV2 Choice 2024"
  gradeId        Int
  
  // Relations
  grade          Grade     @relation(fields: [gradeId], references: [id])
  allowedSubjects Subject[] @relation("OptionalSubjectChoices")
  students       Student[]

  @@map("optional_subject_groups")
}

model Classroom {
  id           Int      @id @default(autoincrement())
  name         String
  abbreviation String?
  capacity     Int
  building     String?
  // Relations
  lessons      Lesson[]

  @@map("classrooms")
}

// ================================================= //
// ACADEMIC ACTIVITIES & RECORDS
// ================================================= //
model Lesson {
  id                  Int                  @id @default(autoincrement())
  name                String
  day                 Day
  startTime           DateTime
  endTime             DateTime
  subjectId           Int
  classId             Int?
  teacherId           String
  classroomId         Int?
  scheduleDraftId     String?
  optionalSubjectId   Int?

  // Relations
  subject             Subject              @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  class               Class?               @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher             Teacher              @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  classroom           Classroom?           @relation(fields: [classroomId], references: [id], onDelete: SetNull)
  scheduleDraft       ScheduleDraft?       @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
  exams               Exam[]
  assignments         Assignment[]
  attendances         Attendance[]

  @@map("lessons")
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  lessonId  Int

  // Relations
  lesson  Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  results Result[]

  @@map("exams")
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId  Int

  // Relations
  lesson  Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  results Result[]

  @@map("assignments")
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Float
  studentId    String
  examId       Int?
  assignmentId Int?

  // Relations
  student    Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  exam       Exam?       @relation(fields: [examId], references: [id], onDelete: Cascade)
  assignment Assignment? @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@map("results")
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  studentId String
  lessonId  Int

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  lesson  Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("attendances")
}

// ================================================= //
// COMMUNICATION & EVENTS
// ================================================= //
model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  classId     Int?

  // Relations
  class Class? @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@map("announcements")
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  classId     Int?

  // Relations
  class Class? @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@map("events")
}

// ================================================= //
// SCHEDULER DRAFT MODELS
// ================================================= //
model ScheduleDraft {
  id                  String                 @id @default(cuid())
  userId              String
  name                String
  description         String?
  isActive            Boolean                @default(false)
  schoolConfig        Json?
  classes             Json?
  subjects            Json?
  teachers            Json?
  classrooms          Json?
  grades              Json?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  
  // Relations
  lessons             Lesson[]
  lessonRequirements  LessonRequirement[]
  teacherConstraints  TeacherConstraint[]
  subjectRequirements SubjectRequirement[]
  teacherAssignments  TeacherAssignment[]

  @@unique([userId, name])
  @@map("schedule_drafts")
}

model LessonRequirement {
  id              Int            @id @default(autoincrement())
  classId         Int
  subjectId       Int
  hours           Int
  scheduleDraftId String?

  // Relations
  scheduleDraft   ScheduleDraft? @relation(fields: [scheduleDraftId], references: [id])
  class           Class          @relation(fields: [classId], references: [id], onDelete: Cascade)
  subject         Subject        @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@map("lesson_requirements")
}

model SubjectRequirement {
  id              Int            @id @default(autoincrement())
  subjectId       Int            @unique
  allowedRoomIds  Int[]
  timePreference  TimePreference @default(ANY)
  scheduleDraftId String?

  // Relations
  scheduleDraft   ScheduleDraft? @relation(fields: [scheduleDraftId], references: [id])
  subject         Subject        @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@map("subject_requirements")
}

model TeacherConstraint {
  id              Int            @id @default(autoincrement())
  teacherId       String
  day             Day
  startTime       String
  endTime         String
  description     String?
  scheduleDraftId String?

  // Relations
  scheduleDraft   ScheduleDraft? @relation(fields: [scheduleDraftId], references: [id])
  teacher         Teacher        @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@map("teacher_constraints")
}

model TeacherAssignment {
  id                Int             @id @default(autoincrement())
  teacherId         String
  subjectId         Int
  scheduleDraftId   String?

  // Relations
  scheduleDraft     ScheduleDraft?  @relation(fields: [scheduleDraftId], references: [id])
  teacher           Teacher         @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  subject           Subject         @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  classAssignments  ClassAssignment[]

  @@unique([teacherId, subjectId])
  @@map("teacher_assignments")
}

model ClassAssignment {
  id                  Int               @id @default(autoincrement())
  teacherAssignmentId Int
  classId             Int

  // Relations
  teacherAssignment   TeacherAssignment @relation(fields: [teacherAssignmentId], references: [id], onDelete: Cascade)
  class               Class             @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([teacherAssignmentId, classId])
  @@map("class_assignments")
}

// ================================================= //
// CHATROOM MODELS
// ================================================= //
model ChatroomSession {
  id           String               @id @default(cuid())
  title        String
  type         String
  classId      Int?
  hostId       String
  status       String               @default("ACTIVE")
  startTime    DateTime
  endTime      DateTime?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  
  // Relations
  host         User                 @relation("HostedSessions", fields: [hostId], references: [id], onDelete: Cascade)
  participants SessionParticipant[]
  messages     ChatroomMessage[]
  raisedHands  RaisedHand[]
  reactions    Reaction[]
  polls        Poll[]
  quizzes      Quiz[]

  @@map("chatroom_sessions")
}

model SessionParticipant {
  id                String          @id @default(cuid())
  chatroomSessionId String
  userId            String
  joinedAt          DateTime        @default(now())
  leftAt            DateTime?
  isMuted           Boolean         @default(false)

  // Relations
  session           ChatroomSession @relation(fields: [chatroomSessionId], references: [id], onDelete: Cascade)
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatroomSessionId, userId])
  @@map("session_participants")
}

model RaisedHand {
  id                String          @id @default(cuid())
  chatroomSessionId String
  userId            String
  raisedAt          DateTime        @default(now())

  // Relations
  session           ChatroomSession @relation(fields: [chatroomSessionId], references: [id], onDelete: Cascade)
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatroomSessionId, userId])
  @@map("raised_hands")
}

model ChatroomMessage {
  id                String          @id @default(cuid())
  content           String
  authorId          String
  chatroomSessionId String
  createdAt         DateTime        @default(now())

  // Relations
  author            User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  session           ChatroomSession @relation(fields: [chatroomSessionId], references: [id], onDelete: Cascade)

  @@map("chatroom_messages")
}

model Reaction {
  id                String          @id @default(cuid())
  type              String
  userId            String
  chatroomSessionId String
  createdAt         DateTime        @default(now())

  // Relations
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  session           ChatroomSession @relation(fields: [chatroomSessionId], references: [id], onDelete: Cascade)

  @@map("reactions")
}

model Poll {
  id                String          @id @default(cuid())
  question          String
  options           Json
  votes             Json
  chatroomSessionId String
  createdAt         DateTime        @default(now())

  // Relations
  session           ChatroomSession @relation(fields: [chatroomSessionId], references: [id], onDelete: Cascade)

  @@map("polls")
}

model Quiz {
  id                String          @id @default(cuid())
  question          String
  options           Json
  correctAnswer     String
  participants      Json
  chatroomSessionId String
  createdAt         DateTime        @default(now())

  // Relations
  session           ChatroomSession @relation(fields: [chatroomSessionId], references: [id], onDelete: Cascade)

  @@map("quizzes")
}

// ================================================= //
// ENUMS
// ================================================= //
enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
  VISITOR
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum TimePreference {
  ANY
  AM
  PM
}
