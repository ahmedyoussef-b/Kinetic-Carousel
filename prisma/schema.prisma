// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String              @id @default(cuid())
  username              String              @unique
  email                 String              @unique
  password              String?
  name                  String?
  role                  Role
  active                Boolean             @default(true)
  img                   String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  passwordResetToken    String?             @unique
  passwordResetExpires  DateTime?
  twoFactorEnabled      Boolean?            @default(false)
  twoFactorCode         String?
  twoFactorCodeExpires  DateTime?
  firstName             String?
  lastName              String?
  Admin                 Admin[]
  Teacher               Teacher[]
  Student               Student[]
  Parent                Parent[]
  hostedSessions        ChatroomSession[]   @relation("HostedSessions")
  participatedSessions  SessionParticipant[]
  authoredMessages      ChatroomMessage[]
}

model Admin {
  id      String @id @default(cuid())
  userId  String @unique
  name    String
  surname String
  phone   String?
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Teacher {
  id                 String              @id @default(cuid())
  userId             String              @unique
  name               String
  surname            String
  phone              String?
  address            String?
  img                String?
  bloodType          String?
  birthday           DateTime?
  sex                UserSex?
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  subjects           Subject[]
  lessons            Lesson[]
}

model Student {
  id               String    @id @default(cuid())
  userId           String    @unique
  name             String
  surname          String
  phone            String?
  address          String
  img              String?
  bloodType        String
  birthday         DateTime
  sex              UserSex
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  classId          Int?
  class            Class?    @relation(fields: [classId], references: [id], onDelete: SetNull)
  gradeId          Int?
  grade            Grade?    @relation(fields: [gradeId], references: [id], onDelete: SetNull)
  parentId         String?
  parent           Parent?   @relation(fields: [parentId], references: [id], onDelete: SetNull)
  attendances      Attendance[]
  results          Result[]
  optionalSubjects Subject[]
}

model Parent {
  id      String    @id @default(cuid())
  userId  String?   @unique
  name    String
  surname String
  phone   String?
  address String?
  img     String?
  user    User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  students Student[]
}

model Grade {
  id      Int       @id @default(autoincrement())
  level   Int       @unique
  classes Class[]
  students Student[]
  subjects Subject[]
}

model Class {
  id           Int             @id @default(autoincrement())
  name         String
  abbreviation String?
  capacity     Int
  gradeId      Int
  grade        Grade           @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  students     Student[]
  lessons      Lesson[]
  announcements Announcement[]
  events        Event[]
}

model Subject {
  id           Int       @id @default(autoincrement())
  name         String
  weeklyHours  Int
  coefficient  Int
  isOptional   Boolean   @default(false)
  teachers     Teacher[]
  lessons      Lesson[]
  gradeId      Int?
  grade        Grade?    @relation(fields: [gradeId], references: [id])
  students     Student[]
}

model Classroom {
  id           Int      @id @default(autoincrement())
  name         String
  abbreviation String?
  capacity     Int
  building     String?
  lessons      Lesson[]
}

model Lesson {
  id              Int           @id @default(autoincrement())
  name            String
  day             Day
  startTime       DateTime      @db.Time(6)
  endTime         DateTime      @db.Time(6)
  subjectId       Int
  classId         Int
  teacherId       String
  classroomId     Int?
  subject         Subject       @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  class           Class         @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher         Teacher       @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  classroom       Classroom?    @relation(fields: [classroomId], references: [id], onDelete: SetNull)
  attendances     Attendance[]
  exams           Exam[]
  assignments     Assignment[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  scheduleDraftId String?
  scheduleDraft   ScheduleDraft? @relation(fields: [scheduleDraftId], references: [id])
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  results   Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  results   Result[]
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Float
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id], onDelete: Cascade)
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime @db.Date
  present   Boolean
  studentId String
  lessonId  Int
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model Event {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  class       Class?    @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model ScheduleDraft {
  id                 String               @id @default(cuid())
  userId             String
  name               String               @unique
  description        String?
  isActive           Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  schoolConfig       Json?
  classes            Json?
  subjects           Json?
  teachers           Json?
  classrooms         Json?
  grades             Json?
  lessons            Lesson[]
  lessonRequirements LessonRequirement[]
  teacherConstraints TeacherConstraint[]
  subjectRequirements SubjectRequirement[]
  teacherAssignments TeacherAssignment[]
}

model School {
  id              Int     @id @default(autoincrement())
  name            String
  startTime       String
  endTime         String
  sessionDuration Int
  schoolDays      Json
}

model LessonRequirement {
  id              Int           @id @default(autoincrement())
  scheduleDraftId String
  scheduleDraft   ScheduleDraft @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
  classId         Int
  subjectId       Int
  hours           Int
}

model TeacherConstraint {
  id              Int           @id @default(autoincrement())
  scheduleDraftId String
  scheduleDraft   ScheduleDraft @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
  teacherId       String
  day             Day
  startTime       String
  endTime         String
  description     String?
}

model SubjectRequirement {
  id              Int           @id @default(autoincrement())
  scheduleDraftId String
  scheduleDraft   ScheduleDraft @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
  subjectId       Int
  allowedRoomIds  Json?
  timePreference  TimePreference
}

model TeacherAssignment {
  id                 Int                @id @default(autoincrement())
  scheduleDraftId    String
  scheduleDraft      ScheduleDraft      @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
  teacherId          String
  subjectId          Int
  classAssignments   ClassAssignment[]
}

model ClassAssignment {
  id                  Int               @id @default(autoincrement())
  teacherAssignmentId Int
  teacherAssignment   TeacherAssignment @relation(fields: [teacherAssignmentId], references: [id], onDelete: Cascade)
  classId             Int
  class               Class             @relation(fields: [classId], references: [id])
}

model ChatroomSession {
  id           String               @id @default(cuid())
  title        String
  type         String // e.g., 'class', 'meeting'
  hostId       String
  classId      Int?
  startTime    DateTime             @default(now())
  endTime      DateTime?
  status       String               @default("ACTIVE") // ACTIVE, ENDED
  host         User                 @relation("HostedSessions", fields: [hostId], references: [id], onDelete: Cascade)
  participants SessionParticipant[]
  messages     ChatroomMessage[]
  quizzes      Quiz[]
  polls        Poll[]
}

model SessionParticipant {
  userId            String
  chatroomSessionId String
  joinedAt          DateTime         @default(now())
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  session           ChatroomSession  @relation(fields: [chatroomSessionId], references: [id], onDelete: Cascade)
  @@id([userId, chatroomSessionId])
}

model ChatroomMessage {
  id                Int             @id @default(autoincrement())
  content           String
  authorId          String
  chatroomSessionId String
  createdAt         DateTime        @default(now())
  author            User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  session           ChatroomSession @relation(fields: [chatroomSessionId], references: [id], onDelete: Cascade)
}

model Quiz {
  id                   Int             @id @default(autoincrement())
  title                String
  chatroomSessionId    String
  isActive             Boolean         @default(true)
  currentQuestionIndex Int             @default(0)
  session              ChatroomSession @relation(fields: [chatroomSessionId], references: [id], onDelete: Cascade)
  questions            QuizQuestion[]
  answers              QuizAnswer[]
}

model QuizQuestion {
  id            Int      @id @default(autoincrement())
  question      String
  options       String[]
  correctAnswer Int
  timeLimit     Int
  quizId        Int
  quiz          Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model QuizAnswer {
  id             Int    @id @default(autoincrement())
  quizId         Int
  questionIndex  Int
  selectedOption Int
  studentId      String
  isCorrect      Boolean
  quiz           Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model Poll {
  id                Int             @id @default(autoincrement())
  question          String
  isActive          Boolean         @default(true)
  chatroomSessionId String
  session           ChatroomSession @relation(fields: [chatroomSessionId], references: [id], onDelete: Cascade)
  options           PollOption[]
}

model PollOption {
  id      Int    @id @default(autoincrement())
  text    String
  pollId  Int
  poll    Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes   Vote[]
}

model Vote {
  id           Int        @id @default(autoincrement())
  pollOptionId Int
  userId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
  VISITOR
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum TimePreference {
  AM
  PM
  ANY
}
