// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("POSTGRES_PRISMA_URL")
}

model User {
  id                  String   @id @unique
  username            String   @unique
  email               String   @unique
  name                String
  firstName           String?
  lastName            String?
  img                 String?
  role                Role
  active              Boolean  @default(true)
  twoFactorEnabled    Boolean? @default(false)
  twoFactorCode       String?
  twoFactorCodeExpires DateTime?

  admin    Admin?
  teacher  Teacher?
  student  Student?
  parent   Parent?

  hostedSessions   ChatroomSession[]
  joinedSessions   SessionParticipant[]
  messagesSent     ChatroomMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Admin {
  id      String  @id @default(cuid())
  name    String
  surname String
  phone   String?
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String  @unique
}

model Teacher {
  id        String  @id @default(cuid())
  name      String
  surname   String
  phone     String?
  address   String?
  img       String?
  bloodType String?
  birthday  DateTime?
  sex       UserSex?
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @unique
  subjects  Subject[]
  lessons   Lesson[]
}

model Student {
  id               String            @id @default(cuid())
  name             String
  surname          String
  phone            String?
  address          String
  img              String?
  bloodType        String?
  birthday         DateTime?
  sex              UserSex?
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String            @unique
  class            Class?            @relation(fields: [classId], references: [id])
  classId          Int?
  grade            Grade?            @relation(fields: [gradeId], references: [id])
  gradeId          Int?
  parent           Parent?           @relation(fields: [parentId], references: [id])
  parentId         String?
  attendances      Attendance[]
  results          Result[]
  optionalSubjects Subject[]         @relation("StudentOptionalSubjects")
  optionalGroup    OptionalSubjectGroup? @relation(fields: [optionalGroupId], references: [id])
  optionalGroupId  Int?
}

model Parent {
  id       String    @id @default(cuid())
  name     String
  surname  String
  phone    String?
  address  String?
  img      String?
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String    @unique
  students Student[]
}

model Subject {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  weeklyHours  Int?
  coefficient  Int?
  isOptional   Boolean  @default(false)
  teachers     Teacher[]
  lessons      Lesson[]
  students     Student[] @relation("StudentOptionalSubjects")
  
  lessonRequirements LessonRequirement[]
  subjectRequirements SubjectRequirement[]
}


model Grade {
  id       Int       @id @default(autoincrement())
  level    Int       @unique
  classes  Class[]
  students Student[]
}

model Class {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  abbreviation String?
  capacity     Int
  grade        Grade    @relation(fields: [gradeId], references: [id])
  gradeId      Int
  students     Student[]
  lessons      Lesson[]
  announcements Announcement[]
  events        Event[]

  teacherAssignments ClassAssignment[]

  @@index([gradeId])
}

model Classroom {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    abbreviation String?
    capacity  Int
    building  String?
    lessons   Lesson[]
}

model Lesson {
  id             Int       @id @default(autoincrement())
  name           String
  day            Day
  startTime      DateTime
  endTime        DateTime
  subject        Subject   @relation(fields: [subjectId], references: [id])
  subjectId      Int
  class          Class     @relation(fields: [classId], references: [id])
  classId        Int
  teacher        Teacher   @relation(fields: [teacherId], references: [id])
  teacherId      String
  classroom      Classroom? @relation(fields: [classroomId], references: [id])
  classroomId    Int?
  exams          Exam[]
  assignments    Assignment[]
  attendances    Attendance[]
  
  scheduleDraft ScheduleDraft? @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
  scheduleDraftId String?
  optionalSubjectId Int?

  @@index([subjectId])
  @@index([classId])
  @@index([teacherId])
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  lessonId  Int
  results   Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  lessonId  Int
  results   Result[]
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  class       Class?   @relation(fields: [classId], references: [id])
  classId     Int?
}

model Event {
    id          Int      @id @default(autoincrement())
    title       String
    description String?
    startTime   DateTime
    endTime     DateTime
    class       Class?   @relation(fields: [classId], references: [id])
    classId     Int?
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Float
  student      Student     @relation(fields: [studentId], references: [id])
  studentId    String
  exam         Exam?       @relation(fields: [examId], references: [id])
  examId       Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  assignmentId Int?
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  lessonId  Int
}

model ChatroomSession {
  id           String               @id @default(cuid())
  title        String
  description  String?
  startTime    DateTime             @default(now())
  endTime      DateTime?
  status       String               @default("ACTIVE") // e.g., ACTIVE, ENDED
  type         String               @default("class") // e.g., class, meeting
  classId      Int?                 // Optional link to a class
  host         User                 @relation(fields: [hostId], references: [id])
  hostId       String
  participants SessionParticipant[]
  messages     ChatroomMessage[]
}

model SessionParticipant {
  id                String          @id @default(cuid())
  user              User            @relation(fields: [userId], references: [id])
  userId            String
  chatroomSession   ChatroomSession @relation(fields: [chatroomSessionId], references: [id])
  chatroomSessionId String
  joinedAt          DateTime        @default(now())
  leftAt            DateTime?

  @@unique([userId, chatroomSessionId])
}

model ChatroomMessage {
  id                Int             @id @default(autoincrement())
  content           String
  author            User            @relation(fields: [authorId], references: [id])
  authorId          String
  chatroomSession   ChatroomSession @relation(fields: [chatroomSessionId], references: [id])
  chatroomSessionId String
  createdAt         DateTime        @default(now())
}

model School {
  id                Int       @id @default(autoincrement())
  name              String
  scheduleDrafts    ScheduleDraft[]
}

model ScheduleDraft {
  id                  String                @id @default(cuid())
  name                String
  description         String?
  isActive            Boolean               @default(false)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  userId              String
  school              School?               @relation(fields: [schoolId], references: [id])
  schoolId            Int?
  
  // JSON fields for storing wizard state
  schoolConfig        Json?
  classes             Json?
  subjects            Json?
  teachers            Json?
  classrooms          Json?
  grades              Json?
  
  // Relational fields for generated schedule and constraints
  lessons             Lesson[]
  lessonRequirements  LessonRequirement[]
  teacherConstraints  TeacherConstraint[]
  subjectRequirements SubjectRequirement[]
  teacherAssignments  TeacherAssignment[]
}

model LessonRequirement {
    id              Int      @id @default(autoincrement())
    classId         Int
    subjectId       Int
    hours           Int
    scheduleDraft   ScheduleDraft @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
    scheduleDraftId String
    
    @@unique([classId, subjectId, scheduleDraftId])
}

model SubjectRequirement {
    id              Int      @id @default(autoincrement())
    subject         Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
    subjectId       Int      @unique
    allowedRoomIds  Int[]
    timePreference  TimePreference @default(ANY)
    scheduleDraft   ScheduleDraft @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
    scheduleDraftId String
}

model TeacherConstraint {
    id              Int      @id @default(autoincrement())
    teacherId       String
    day             Day
    startTime       String
    endTime         String
    description     String?
    scheduleDraft   ScheduleDraft @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
    scheduleDraftId String
}

model TeacherAssignment {
    id              Int      @id @default(autoincrement())
    teacherId       String
    subjectId       Int
    scheduleDraft   ScheduleDraft @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
    scheduleDraftId String
    classAssignments ClassAssignment[]
    
    @@unique([teacherId, subjectId, scheduleDraftId])
}

model ClassAssignment {
    id                  Int      @id @default(autoincrement())
    teacherAssignment   TeacherAssignment @relation(fields: [teacherAssignmentId], references: [id], onDelete: Cascade)
    teacherAssignmentId Int
    class               Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
    classId             Int
    
    @@unique([teacherAssignmentId, classId])
}

model OptionalSubjectGroup {
  id        Int       @id @default(autoincrement())
  name      String
  students  Student[]
}


enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
  VISITOR
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum UserSex {
  MALE
  FEMALE
}

enum TimePreference {
    ANY
    AM
    PM
}
