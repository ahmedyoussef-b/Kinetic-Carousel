// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---

enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
  VISITOR
}

enum UserSex {
  MALE
  FEMALE
  OTHER
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum TimePreference {
  AM
  PM
  ANY
}


// --- MODELS ---

model User {
  id                  String   @id @default(cuid())
  username            String   @unique
  email               String   @unique
  name                String
  firstName           String
  lastName            String
  role                Role
  img                 String?
  active              Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  twoFactorEnabled    Boolean?
  twoFactorCode       String?
  twoFactorCodeExpires DateTime?
  
  // Relations
  admin               Admin[]
  teacher             Teacher[]
  student             Student[]
  parent              Parent[]
  hostedSessions      ChatroomSession[] @relation("HostedSessions")
  sessionParticipations SessionParticipant[]
  messages            ChatroomMessage[]
  raisedHands         RaisedHand[]
  reactions           Reaction[]
  drafts              ScheduleDraft[]
}

model Admin {
  id      String  @id @default(cuid())
  userId  String  @unique
  name    String
  surname String
  phone   String?

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Teacher {
  id        String  @id @default(cuid())
  userId    String  @unique
  name      String
  surname   String
  phone     String?
  address   String?
  img       String?
  bloodType String?
  birthday  DateTime?
  sex       UserSex?

  // Relations
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  subjects   Subject[]
  lessons    Lesson[]
  
  // Back-relations for schema validity
  constraints TeacherConstraint[]
  assignments TeacherAssignment[]
}

model Student {
  id                String  @id @default(cuid())
  userId            String  @unique
  name              String
  surname           String
  address           String?
  phone             String?
  img               String?
  bloodType         String?
  birthday          DateTime?
  sex               UserSex?
  classId           Int?
  gradeId           Int?
  parentId          String?
  optionalGroupId   Int?

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  class         Class?   @relation(fields: [classId], references: [id])
  grade         Grade?   @relation(fields: [gradeId], references: [id])
  parent        Parent?  @relation(fields: [parentId], references: [id])
  optionalGroup OptionalSubjectGroup? @relation(fields: [optionalGroupId], references: [id])

  // Back-relations
  results      Result[]
  attendances  Attendance[]
  optionalSubjects Subject[] @relation("StudentOptionalSubjects")
}

model Parent {
  id      String  @id @default(cuid())
  userId  String  @unique
  name    String
  surname String
  phone   String?
  address String?
  img     String?

  // Relations
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  students Student[]
}

model Subject {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  weeklyHours Int?
  coefficient Int?
  isOptional  Boolean?

  // Relations
  teachers   Teacher[]
  lessons    Lesson[]
  
  // Back-relations for schema validity
  assignments       TeacherAssignment[]
  lessonRequirements LessonRequirement[]
  subjectRequirements SubjectRequirement[]
  optionalStudents  Student[] @relation("StudentOptionalSubjects")
}

model Grade {
  id      Int       @id @default(autoincrement())
  level   Int       @unique
  
  // Relations
  classes  Class[]
  students Student[]
}

model Class {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  abbreviation String?
  capacity     Int
  gradeId      Int

  // Relations
  grade    Grade     @relation(fields: [gradeId], references: [id])
  students Student[]
  lessons  Lesson[]
  events   Event[]
  announcements Announcement[]
  
  // Back-relations for schema validity
  lessonRequirements LessonRequirement[]
  assignments ClassAssignment[]
}

model Classroom {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  capacity  Int
  building  String?
  
  // Relations
  lessons   Lesson[]
}

model Lesson {
  id            Int      @id @default(autoincrement())
  name          String
  day           Day
  startTime     DateTime
  endTime       DateTime
  subjectId     Int
  classId       Int
  teacherId     String
  classroomId   Int?
  scheduleDraftId String?
  optionalSubjectId Int?

  // Relations
  subject     Subject      @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  class       Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher     Teacher      @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  classroom   Classroom?   @relation(fields: [classroomId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
  scheduleDraft ScheduleDraft? @relation(fields: [scheduleDraftId], references: [id])
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  lessonId  Int

  // Relations
  lesson  Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  results Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId  Int

  // Relations
  lesson  Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  results Result[]
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Float
  studentId    String
  examId       Int?
  assignmentId Int?

  // Relations
  student    Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  exam       Exam?       @relation(fields: [examId], references: [id])
  assignment Assignment? @relation(fields: [assignmentId], references: [id])

  @@unique([studentId, examId], name: "student_exam")
  @@unique([studentId, assignmentId], name: "student_assignment")
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  studentId String
  lessonId  Int

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  lesson  Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  classId     Int?

  // Relations
  class Class? @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  classId     Int?

  // Relations
  class Class? @relation(fields: [classId], references: [id])
}

// Model for grouping optional subjects, e.g., "Langue Vivante 2"
model OptionalSubjectGroup {
  id       Int       @id @default(autoincrement())
  name     String    @unique // e.g., "Langue Vivante 2"
  students Student[]
}

// --- SCHEDULE GENERATOR MODELS ---

model School {
  id                Int      @id @default(autoincrement())
  name              String
  startTime         String // e.g., "08:00"
  endTime           String // e.g., "17:00"
  sessionDuration   Int    // in minutes
  schoolDays        Json   // e.g., ["monday", "tuesday", ...]
  scheduleDraftId   String?  @unique
  
  // Relations
  scheduleDraft ScheduleDraft? @relation(fields: [scheduleDraftId], references: [id])
}

model LessonRequirement {
  id              Int      @id @default(autoincrement())
  classId         Int
  subjectId       Int
  hours           Int
  scheduleDraftId String?

  // Relations
  scheduleDraft ScheduleDraft? @relation(fields: [scheduleDraftId], references: [id])
  class         Class          @relation(fields: [classId], references: [id], onDelete: Cascade)
  subject       Subject        @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([classId, subjectId])
}

model TeacherConstraint {
  id              Int      @id @default(autoincrement())
  teacherId       String
  day             Day
  startTime       String
  endTime         String
  description     String?
  scheduleDraftId String?

  // Relations
  scheduleDraft ScheduleDraft? @relation(fields: [scheduleDraftId], references: [id])
  teacher       Teacher        @relation(fields: [teacherId], references: [id], onDelete: Cascade)
}

model SubjectRequirement {
  id              Int      @id @default(autoincrement())
  subjectId       Int      @unique
  allowedRoomIds  Json?    // Array of Classroom IDs
  timePreference  TimePreference @default(ANY)
  scheduleDraftId String?

  // Relations
  scheduleDraft ScheduleDraft? @relation(fields: [scheduleDraftId], references: [id])
  subject       Subject        @relation(fields: [subjectId], references: [id], onDelete: Cascade)
}

model TeacherAssignment {
  id                 Int      @id @default(autoincrement())
  teacherId          String
  subjectId          Int
  scheduleDraftId    String?

  // Relations
  scheduleDraft ScheduleDraft? @relation(fields: [scheduleDraftId], references: [id])
  teacher       Teacher        @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  subject       Subject        @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  classAssignments ClassAssignment[]

  @@unique([teacherId, subjectId])
}

model ClassAssignment {
  id                  Int      @id @default(autoincrement())
  teacherAssignmentId Int
  classId             Int

  // Relations
  teacherAssignment TeacherAssignment @relation(fields: [teacherAssignmentId], references: [id], onDelete: Cascade)
  class             Class             @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([teacherAssignmentId, classId])
}

model ScheduleDraft {
  id        String @id @default(cuid())
  name      String @unique
  description String?
  isActive  Boolean @default(false)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // JSON fields to store configuration snapshots
  schoolConfig  Json?
  classes       Json?
  subjects      Json?
  teachers      Json?
  rooms         Json?
  grades        Json?
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  school School?
  lessons Lesson[]
  lessonRequirements LessonRequirement[]
  teacherConstraints TeacherConstraint[]
  subjectRequirements SubjectRequirement[]
  teacherAssignments TeacherAssignment[]
}


// --- CHATROOM MODELS ---

model ChatroomSession {
  id          String   @id @default(cuid())
  title       String
  type        String   // 'class' | 'meeting'
  classId     Int?
  hostId      String
  status      String   @default("ACTIVE") // 'ACTIVE' | 'ENDED'
  startTime   DateTime
  endTime     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  host        User     @relation("HostedSessions", fields: [hostId], references: [id], onDelete: Cascade)
  participants SessionParticipant[]
  messages    ChatroomMessage[]
  raisedHands RaisedHand[]
  
  // Back-relations for schema validity
  reactions   Reaction[]
  polls       Poll[]
  quizzes     Quiz[]

  @@map("chatroom_sessions")
}

model SessionParticipant {
  id                String   @id @default(cuid())
  chatroomSessionId String
  userId            String
  joinedAt          DateTime @default(now())
  leftAt            DateTime?
  isMuted           Boolean  @default(false)

  // Relations
  session ChatroomSession @relation(fields: [chatroomSessionId], references: [id], onDelete: Cascade)
  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatroomSessionId, userId])
  @@map("session_participants")
}

model RaisedHand {
  id        String   @id @default(cuid())
  chatroomSessionId String
  userId    String
  raisedAt  DateTime @default(now())

  // Relations
  session ChatroomSession @relation(fields: [chatroomSessionId], references: [id], onDelete: Cascade)
  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatroomSessionId, userId])
  @@map("raised_hands")
}

model ChatroomMessage {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  chatroomSessionId String
  createdAt DateTime @default(now())

  // Relations
  author  User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  session ChatroomSession @relation(fields: [chatroomSessionId], references: [id], onDelete: Cascade)

  @@map("chatroom_messages")
}

model Reaction {
  id        String   @id @default(cuid())
  type      String   // like, love, etc.
  userId    String
  chatroomSessionId String
  createdAt DateTime @default(now())

  // Relations
  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  session ChatroomSession @relation(fields: [chatroomSessionId], references: [id], onDelete: Cascade)

  @@map("reactions")
}

model Poll {
  id        String   @id @default(cuid())
  question  String
  options   Json     // { id: string, text: string }[]
  votes     Json     // { userId: string, optionId: string }[]
  chatroomSessionId String
  createdAt DateTime @default(now())

  // Relations
  session ChatroomSession @relation(fields: [chatroomSessionId], references: [id], onDelete: Cascade)

  @@map("polls")
}

model Quiz {
  id           String   @id @default(cuid())
  question     String
  options      Json     // { id: string, text: string }[]
  correctAnswer String
  participants Json     // { userId: string, answer: string, correct: boolean }[]
  chatroomSessionId    String
  createdAt    DateTime @default(now())

  // Relations
  session ChatroomSession @relation(fields: [chatroomSessionId], references: [id], onDelete: Cascade)

  @@map("quizzes")
}
