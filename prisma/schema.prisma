// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

// USER & AUTHENTICATION
model User {
  id                    String    @id @default(cuid())
  name                  String?
  firstName             String?
  lastName              String?
  username              String    @unique
  email                 String    @unique
  img                   String?
  role                  Role      @default(STUDENT)
  active                Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  twoFactorEnabled      Boolean?  @default(false)
  twoFactorCode         String?
  twoFactorCodeExpires  DateTime?
  admin                 Admin?
  teacher               Teacher?
  student               Student?
  parent                Parent?
  messages              ChatroomMessage[]
  sessionParticipants   SessionParticipant[]
  hostedSessions        ChatroomSession[]
}

model Admin {
  id      String  @id @default(cuid())
  userId  String  @unique
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name    String
  surname String
  phone   String?
}

model Teacher {
  id                 String                @id @default(cuid())
  userId             String                @unique
  user               User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  name               String
  surname            String
  phone              String?
  address            String?
  img                String?
  bloodType          String?
  birthday           DateTime?
  sex                UserSex?
  subjects           Subject[]
  lessons            Lesson[]
  teacherConstraints TeacherConstraint[]
  teacherAssignments TeacherAssignment[]
}

model Student {
  id                 String                 @id @default(cuid())
  userId             String                 @unique
  user               User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  name               String
  surname            String
  phone              String?
  address            String?
  img                String?
  bloodType          String?
  birthday           DateTime?
  sex                UserSex?
  gradeId            Int?
  grade              Grade?                 @relation(fields: [gradeId], references: [id])
  classId            Int?
  class              Class?                 @relation(fields: [classId], references: [id])
  parentId           String?
  parent             Parent?                @relation(fields: [parentId], references: [id])
  attendances        Attendance[]
  results            Result[]
  optionalSubjects   Subject[]              @relation("StudentOptionalSubjects")
  optionalGroup      OptionalSubjectGroup?  @relation(fields: [optionalGroupId], references: [id])
  optionalGroupId    Int?
}

model Parent {
  id       String    @id @default(cuid())
  userId   String?   @unique
  user     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name     String
  surname  String
  phone    String?
  address  String
  img      String?
  students Student[]
}

// ACADEMICS
model Grade {
  id       Int       @id @default(autoincrement())
  level    Int       @unique
  classes  Class[]
  students Student[]
}

model Class {
  id                 Int                   @id @default(autoincrement())
  name               String
  abbreviation       String?
  capacity           Int
  gradeId            Int
  grade              Grade                 @relation(fields: [gradeId], references: [id])
  students           Student[]
  lessons            Lesson[]
  announcements      Announcement[]
  events             Event[]
  lessonRequirements LessonRequirement[]
  classAssignments   ClassAssignment[]
  chatroomSessions   ChatroomSession[]
}

model Subject {
  id                  Int                   @id @default(autoincrement())
  name                String
  weeklyHours         Int?
  coefficient         Int?
  isOptional          Boolean?              @default(false)
  teachers            Teacher[]
  lessons             Lesson[]
  lessonRequirements  LessonRequirement[]
  subjectRequirements SubjectRequirement[]
  teacherAssignments  TeacherAssignment[]
  optionalGroups      OptionalSubjectGroup[]
  students            Student[]             @relation("StudentOptionalSubjects")
}

model Classroom {
  id           Int      @id @default(autoincrement())
  name         String
  abbreviation String?
  capacity     Int
  building     String?
  lessons      Lesson[]
}

model Lesson {
  id                Int       @id @default(autoincrement())
  name              String
  day               Day
  startTime         DateTime
  endTime           DateTime
  subjectId         Int
  subject           Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  classId           Int?
  class             Class?    @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacherId         String
  teacher           Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  classroomId       Int?
  classroom         Classroom? @relation(fields: [classroomId], references: [id], onDelete: SetNull)
  attendances       Attendance[]
  exams             Exam[]
  assignments       Assignment[]
  scheduleDraftId   String?
  scheduleDraft     ScheduleDraft? @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
  optionalSubjectId Int?
}

model Exam {
  id        Int       @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  lessonId  Int
  lesson    Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  results   Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  results   Result[]
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Float
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id], onDelete: Cascade)
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  studentId String
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

// EVENTS & COMMUNICATION
model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id], onDelete: Cascade)
}

// SCHEDULER & CONSTRAINTS
model ScheduleDraft {
  id                  String                 @id @default(cuid())
  userId              String
  name                String                 @unique
  description         String?
  isActive            Boolean                @default(false)
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  schoolConfig        Json?
  classes             Json?
  subjects            Json?
  teachers            Json?
  classrooms          Json?
  grades              Json?
  lessons             Lesson[]
  lessonRequirements  LessonRequirement[]
  teacherConstraints  TeacherConstraint[]
  subjectRequirements SubjectRequirement[]
  teacherAssignments  TeacherAssignment[]
}

model School {
  id              Int     @id @default(autoincrement())
  name            String
  startTime       String
  endTime         String
  sessionDuration Int
  schoolDays      Json
}

model LessonRequirement {
  id              Int            @id @default(autoincrement())
  classId         Int
  subjectId       Int
  hours           Int
  scheduleDraftId String?
  scheduleDraft   ScheduleDraft? @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
  class           Class          @relation(fields: [classId], references: [id], onDelete: Cascade)
  subject         Subject        @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([classId, subjectId, scheduleDraftId])
}

model TeacherConstraint {
  id              Int            @id @default(autoincrement())
  teacherId       String
  day             Day
  startTime       String
  endTime         String
  description     String?
  scheduleDraftId String?
  teacher         Teacher        @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  scheduleDraft   ScheduleDraft? @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
}

model SubjectRequirement {
  id              Int            @id @default(autoincrement())
  subjectId       Int            @unique
  subject         Subject        @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  allowedRoomIds  Json?
  timePreference  TimePreference @default(ANY)
  scheduleDraftId String?
  scheduleDraft   ScheduleDraft? @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
}

model TeacherAssignment {
  id                 Int                 @id @default(autoincrement())
  teacherId          String
  subjectId          Int
  scheduleDraftId    String?
  classAssignments   ClassAssignment[]
  teacher            Teacher             @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  subject            Subject             @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  scheduleDraft      ScheduleDraft?      @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)

  @@unique([teacherId, subjectId, scheduleDraftId])
}

model ClassAssignment {
  id                  Int               @id @default(autoincrement())
  teacherAssignmentId Int
  classId             Int
  teacherAssignment   TeacherAssignment @relation(fields: [teacherAssignmentId], references: [id], onDelete: Cascade)
  class               Class             @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([teacherAssignmentId, classId])
}

model OptionalSubjectGroup {
  id        Int       @id @default(autoincrement())
  name      String
  subjectId Int
  subject   Subject   @relation(fields: [subjectId], references: [id])
  students  Student[]

  @@unique([name, subjectId])
}

// CHATROOM MODELS
model ChatroomSession {
  id           String               @id @default(cuid())
  title        String
  type         String // "class" or "meeting"
  hostId       String
  host         User                 @relation(fields: [hostId], references: [id], onDelete: Cascade)
  classId      Int?
  class        Class?               @relation(fields: [classId], references: [id])
  startTime    DateTime             @default(now())
  endTime      DateTime?
  status       String               @default("ACTIVE") // ACTIVE, ENDED
  participants SessionParticipant[]
  messages     ChatroomMessage[]
}

model SessionParticipant {
  id                String          @id @default(cuid())
  userId            String
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatroomSessionId String
  chatroomSession   ChatroomSession @relation(fields: [chatroomSessionId], references: [id], onDelete: Cascade)
  joinedAt          DateTime        @default(now())
  leftAt            DateTime?

  @@unique([userId, chatroomSessionId])
}

model ChatroomMessage {
  id                Int             @id @default(autoincrement())
  content           String
  authorId          String
  author            User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  chatroomSessionId String
  chatroomSession   ChatroomSession @relation(fields: [chatroomSessionId], references: [id], onDelete: Cascade)
  createdAt         DateTime        @default(now())
}

// ENUMS
enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
  VISITOR
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum TimePreference {
  ANY
  AM
  PM
}
